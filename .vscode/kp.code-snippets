{
	"Model snippet": {
		"scope": "javascript",
		"prefix": "kpmodel",
		"body": [
			"const mongoose = require('mongoose');\n",
			"const Schema = mongoose.Schema;\n",
			"const $1 = new Schema(",
			"	{",
			"		$0"
			"	},",
			"	{ timestamps: true }",
			");\n",
			"module.exports = mongoose.model('$2', $1);\n"
		],
		"description": "Inster model template"
	},
	"Router snippet": {
		"scope": "javascript",
		"prefix": "kproute",
		"body": [
			"const express = require('express');",
			"const { body } = require('express-validator');\n",
			"const $1Controller = require('../controllers/$1.controller');",
			"const isAuth = require('../middleware/is-auth.middleware');",
			"const isAdmin = require('../middleware/is-admin.middleware');\n",
			"const router = express.Router();\n",
			"router.get(",
			"	'/$2/count'"
			");\n",
			"router.get(",
			"	'/$2'"
			");\n",
			"router.get(",
			"	'/$2/:$1Id'"
			");\n",
			"router.post(",
			"	'/$2'"
			");\n",
			"router.put(",
			"	'/$2/:$1Id'"
			");\n",
			"router.delete(",
			"	'/$2/:$1Id'"
			");\n",
			"module.exports = router;\n"
		],
		"description": "Inster route template"
	},
	"Controller snippet": {
		"scope": "javascript",
		"prefix": "kpcont",
		"body": [
			"const { validationResult } = require('express-validator');\n",
			"const $1 = require('../models/$2');\n",
			"exports.get$1sCount = async (req, res, next) => {",
			"	try {",
			"		const count = await $1.countDocuments();\n",
			"		res.status(200).json(count);",
			"	} catch (error) {",
			"		if (!error.statusCode) {",
			"			error.statusCode = 500;",
			"		}\n",
			"		next(error);",
			"	}",
			"};\n",
			"exports.get$1 = async (req, res, next) => {",
			"	const { $2Id } = req.params;\n",
			"	try {",
			"		const $2 = await $1.findById($2Id);\n",
			"		if (!$2) {",
			"			const error = new Error('$1 does not exist');",
			"			error.statusCode = 404;\n",
			"			throw error;",
			"		}\n",
			"		res.status(200).json($2);",
			"	} catch (error) {",
			"		if (!error.statusCode) {",
			"			error.statusCode = 500;",
			"		}\n",
			"		next(error);",
			"	}",
			"};\n",
			"exports.get$1s = async (req, res, next) => {",
			"	const { skip, limit } = req.query;\n",
			"	try {",
			"		const $2s = await $1.find().skip(skip).limit(limit);\n",
			"		res.status(200).json(themes);",
			"	} catch (error) {",
			"		if (!error.statusCode) {",
			"			error.statusCode = 500;",
			"		}\n",
			"		next(error);",
			"	}",
			"};",
			"exports.create$1 = async (req, res, next) => {",
			"	const input = req.body;",
			"	const errors = validationResult(req);\n",
			"	try {",
			"		if (!errors.isEmpty()) {",
			"			const validationErr = errors.array().shift();",
			"			const { msg, path, value } = validationErr;",
			"			const error = new Error(msg);\n",
			"			error.statusCode = 400;",
			"			error.data = { path, value };\n",
			"			throw error;",
			"		}\n",
			"		const $2Obj = new $1({ ...input });\n",
			"		const $2 = await $2Obj.save();\n",
			"",
			"		res.status(201).json($2);",
			"	} catch (error) {",
			"		if (!error.statusCode) {",
			"			error.statusCode = 500;",
			"		}\n",
			"		next(error);",
			"	}",
			"};\n",
			"exports.update$1 = async (req, res, next) => {",
			"	const { $2Id } = req.params;",
			"	const input = req.body;",
			"	const errors = validationResult(req);\n",
			"	try {",
			"		if (!errors.isEmpty()) {",
			"			const validationErr = errors.array().shift();",
			"			const { msg, path, value } = validationErr;",
			"			const error = new Error(msg);\n",
			"			error.statusCode = 400;",
			"			error.data = { path, value };\n",
			"			throw error;",
			"		}\n",
			"		let loaded$1 = await $1.findById($2Id);\n",
			"		if (!loaded$1) {",
			"			const error = new Error('$1 does not exist');",
			"			error.statusCode = 404;\n",
			"			throw error;",
			"		}\n",
			"		loaded$1 = { ...input, _id: $2Id };\n",
			"		await loaded$1.save();\n",
			"		res.status(201).json(loaded$1);",
			"	} catch (error) {",
			"		if (!error.statusCode) {",
			"			error.statusCode = 500;",
			"		}\n",
			"		next(error);",
			"	}",
			"};\n",
			"exports.delete$1 = async (req, res, next) => {",
			"	const { $2Id } = req.params;\n",
			"	try {",
			"		await $1.findByIdAndDelete($2Id);\n",
			"		res.status(201).json({ message: '$1 was deleted' });",
			"	} catch (error) {",
			"		if (!error.statusCode) {",
			"			error.statusCode = 500;",
			"		}\n",
			"		next(error);",
			"	}",
			"};\n",
		],
		"description": "Inster controller template"
	},
}
